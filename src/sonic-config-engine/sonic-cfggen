#!/usr/bin/env python

import sys
import os.path
import argparse
import yaml
import jinja2
import netaddr
import json
from minigraph import minigraph_encoder
from minigraph import parse_xml
from minigraph import parse_device_desc_xml
from sonic_platform import get_machine_info
from sonic_platform import get_platform_info

def is_ipv4(value):
    if not value:
        return False
    if isinstance(value, netaddr.IPAddress):
        addr = value
    else:
        try:
            addr = netaddr.IPAddress(str(value))
        except:
            return False
    return addr.version == 4

def is_ipv6(value):
    if not value:
        return False
    if isinstance(value, netaddr.IPAddress):
        addr = value
    else:
        try:
            addr = netaddr.IPAddress(str(value))
        except:
            return False
    return addr.version == 6

def unique_name(l):
    name_list = []
    new_list = []
    for item in l:
        if item['name'] not in name_list:
            name_list.append(item['name'])
            new_list.append(item)
    return new_list

def main():
    parser=argparse.ArgumentParser(description="Render configuration file from minigraph data and jinja2 template.")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-m", "--minigraph", help="minigraph xml file")
    group.add_argument("-M", "--device-description", help="device description xml file")
    parser.add_argument("-p", "--port-config", help="port config file, used with -m")
    parser.add_argument("-y", "--yaml", help="yaml file that contains addtional variables", action='append', default=[])
    parser.add_argument("-a", "--additional-data", help="addition data, in json string")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-t", "--template", help="render the data with the template file")
    group.add_argument("-v", "--var", help="print the value of a variable, support jinja2 expression")
    group.add_argument("--var-json", help="print the value of a variable, in json format")
    group.add_argument("--print-data", help="print all data", action='store_true')
    args = parser.parse_args()

    data = {}
    machine_info = get_machine_info()
    if machine_info != None:
        data.update(machine_info)
        platform_info = get_platform_info(machine_info)
        if platform_info != None:
            data['platform'] = platform_info

    if args.minigraph != None:
        minigraph = args.minigraph
        if data.has_key('platform'):
            if args.port_config != None:
                data.update(parse_xml(minigraph, data['platform'], args.port_config))
            else:
                data.update(parse_xml(minigraph, data['platform']))
        else:
            if args.port_config != None:
                data.update(parse_xml(minigraph, port_config_file=args.port_config))
            else:
                data.update(parse_xml(minigraph))

    if args.device_description != None:
        data.update(parse_device_desc_xml(args.device_description))

    for yaml_file in args.yaml:
        with open(yaml_file, 'r') as stream:
            additional_data = yaml.load(stream)      
            data.update(additional_data)

    if args.additional_data != None:
        data.update(json.loads(args.additional_data))

    if args.template != None:
        template_file = os.path.abspath(args.template)
        env = jinja2.Environment(loader=jinja2.FileSystemLoader('/'), trim_blocks=True)
        env.filters['ipv4'] = is_ipv4
        env.filters['ipv6'] = is_ipv6
        env.filters['unique_name'] = unique_name
        template = env.get_template(template_file)
        print template.render(data)
    
    if args.var != None:
        template = jinja2.Template('{{' + args.var + '}}')
        print template.render(data)

    if args.var_json != None:
        print json.dumps(data[args.var_json], indent=4, cls=minigraph_encoder)

    if args.print_data:
        print json.dumps(data, indent=4, cls=minigraph_encoder)

if __name__ == "__main__":
    main()
